package controller

import (
	"bytes"
	"io"
	"net/http"

	"github.com/ciela/playground_golang/lgtm_maker/aws"

	"code.google.com/p/go-uuid/uuid"
	"github.com/mitchellh/goamz/s3"
	"github.com/naoina/kocha"
)

const (
	// 最大画像容量(4MB)
	MaxBytes = 4194304
)

type Images struct {
	*kocha.DefaultController
}

func (im *Images) GET(c *kocha.Context) kocha.Result {
	// FIXME: auto-generated by kocha
	return kocha.Render(c)
}

func (im *Images) POST(c *kocha.Context) kocha.Result {
	//リクエスト容量が大きかったら最初から弾く
	if c.Request.ContentLength > MaxBytes {
		return kocha.RenderError(c, http.StatusBadRequest, "Size of your reqest is too large")
	}

	//FormDataの取得
	f, h, err := c.Request.FormFile("image")
	if err != nil {
		return kocha.RenderError(c, http.StatusBadRequest, "Request has not been accepted")
	}
	defer f.Close()

	//読み込み
	b := new(bytes.Buffer)
	if w, err := io.Copy(b, f); err != nil || w > MaxBytes {
		return kocha.RenderError(c, http.StatusBadRequest, "Size of your file is too large")
	}

	// 配置用のパス決めてS3に配置
	p := uuid.New() //ver4
	if err = aws.LgtmBucket.Put(p, b.Bytes(), h.Header["Content-Type"][0], s3.PublicRead); err != nil {
		return kocha.RenderError(c, http.StatusInternalServerError, "An error has occured when uploading image")
	}

	// TODO DBにIDを保存

	// FIXME remove nil
	return kocha.Render(c, kocha.Data{"imagePath": p})
}

func (im *Images) PUT(c *kocha.Context) kocha.Result {
	// FIXME: auto-generated by kocha
	//iid := c.Params.Get("imageId")
	return kocha.Render(c)
}

func (im *Images) DELETE(c *kocha.Context) kocha.Result {
	// FIXME: auto-generated by kocha
	//iid := c.Params.Get("imageId")
	return kocha.Render(c)
}
